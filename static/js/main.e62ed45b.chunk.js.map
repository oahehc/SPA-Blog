{"version":3,"sources":["components/header.jsx","components/posts.jsx","components/post.jsx","components/about.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","handleChangePage","Navbar","bg","variant","expand","Brand","onClick","e","Nav","className","Link","Posts","state","postList","fetch","then","res","json","data","setState","this","props","map","post","key","id","data-id","href","title","body","Component","Post","About","App","page","preventDefault","postId","switchPage","posdId","nextProps","nextState","url","window","history","pushState","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6PAeeA,EAZA,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBAChB,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,QAAQ,QAAQC,OAAO,MACxC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,QAAS,SAACC,GAAD,OAAOP,EAAiBO,EAAG,OAAlD,QACA,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUJ,QAAS,SAACC,GAAD,OAAOP,EAAiBO,EAAG,WAA9C,SACA,kBAACC,EAAA,EAAIE,KAAL,CAAUJ,QAAS,SAACC,GAAD,OAAOP,EAAiBO,EAAG,OAA9C,WCgCOI,E,2MAtCbC,MAAQ,CACNC,SAAU,I,mFAGS,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZN,SAAUK,S,+BAKR,IACAL,EAAaO,KAAKR,MAAlBC,SACAb,EAAqBoB,KAAKC,MAA1BrB,iBAER,OACE,yBAAKS,UAAU,SAEXI,EAASS,KAAI,SAAAC,GAAI,OACf,yBAAKd,UAAU,OAAOe,IAAKD,EAAKE,GAAIC,UAASH,EAAKE,IAChD,uBACEE,KAAK,IACLrB,QAAS,SAACC,GAAD,OAAOP,EAAiBO,EAAG,OAAQgB,EAAKE,KACjDhB,UAAU,cAETc,EAAKK,OAER,uBAAGnB,UAAU,oBAAoBc,EAAKM,e,GA/BhCC,aCyBLC,E,2MAxBbnB,MAAQ,CACNW,KAAM,I,mFAEa,IAAD,OACVE,EAAOL,KAAKC,MAAZI,GACRX,MAAM,8CAAD,OAA+CW,IACjDV,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZI,KAAML,S,+BAKJ,IACAK,EAASH,KAAKR,MAAdW,KACR,OACE,yBAAKd,UAAU,WACb,2BAAIc,EAAKM,W,GAnBEC,aCIJE,EAJD,WACZ,OAAO,+CC8DMC,G,wBAvDb,WAAYZ,GAAQ,IAAD,8BACjB,4CAAMA,KAIRT,MAAQ,CACNsB,KAAM,SANW,EAoBnBlC,iBAAmB,SAACO,EAAG2B,GAAqB,IAAfT,EAAc,uDAAT,KAChClB,EAAE4B,iBACF,EAAKC,OAASX,EACd,EAAKN,SAAS,CACZe,UAxBe,EA4BnBG,WAAa,SAACH,GACZ,OAAQA,GACN,IAAK,OACH,OAAO,kBAAC,EAAD,CAAMT,GAAI,EAAKW,SACxB,IAAK,QACH,OAAO,kBAAC,EAAD,MAET,IAAK,GAAI,QACP,OAAO,kBAAC,EAAD,CAAOpC,iBAAkB,EAAKA,qBAlCzC,EAAKsC,OAAS,KAFG,E,mFASGC,EAAWC,GAC/B,OAAIA,EAAUN,OAASd,KAAKR,MAAMsB,O,2CAId,IACZA,EAASd,KAAKR,MAAdsB,KACFO,EAAMrB,KAAKgB,OAAL,UAAiBF,EAAjB,YAAyBd,KAAKgB,QAAWF,EACrDQ,OAAOC,QAAQC,UAAU,KAAM,KAAMH,K,+BAuB7B,IACAP,EAASd,KAAKR,MAAdsB,KACR,OACE,yBAAKzB,UAAU,WACb,kBAAC,EAAD,CACET,iBAAkBoB,KAAKpB,mBAEzB,0BAAMS,UAAU,YACbW,KAAKiB,WAAWH,S,GAjDTJ,cCGEe,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,MAAK,SAAAyC,GACjCA,EAAaC,kB","file":"static/js/main.e62ed45b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nconst Header = ({ handleChangePage }) => {\n  return (\n    <Navbar bg=\"light\" variant=\"light\" expand=\"lg\">\n      <Navbar.Brand onClick={(e) => handleChangePage(e, '/')}>Blog</Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <Nav.Link onClick={(e) => handleChangePage(e, 'about')}>About</Nav.Link>\n        <Nav.Link onClick={(e) => handleChangePage(e, '/')}>List</Nav.Link>\n      </Nav>\n    </Navbar>\n  )\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass Posts extends Component {\n  state = {\n    postList: [],\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          postList: data,\n        })\n      })\n  }\n\n  render() {\n    const { postList } = this.state;\n    const { handleChangePage } = this.props;\n\n    return (\n      <div className=\"posts\">\n        {\n          postList.map(post => (\n            <div className=\"post\" key={post.id} data-id={post.id}>\n              <a\n                href=\"#\"\n                onClick={(e) => handleChangePage(e, 'post', post.id)}\n                className=\"post-title\"\n              >\n                {post.title}\n              </a>\n              <p className=\"post-description\">{post.body}</p>\n            </div>\n          ))\n        }\n      </div>\n    )\n  }\n}\nexport default Posts;\n","import React, { Component } from 'react';\n\nclass Post extends Component {\n  state = {\n    post: '',\n  }\n  componentDidMount() {\n    const { id } = this.props;\n    fetch(`https://jsonplaceholder.typicode.com/posts/${id}`)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          post: data,\n        })\n      })\n  }\n\n  render() {\n    const { post } = this.state;\n    return (\n      <div className=\"article\">\n        <p>{post.body}</p>\n      </div>\n    )\n  }\n}\n\nexport default Post;\n","import React from 'react';\n\nconst About = () => {\n  return <p>About this blog</p>;\n}\n\nexport default About;\n","import React, { Component } from 'react';\nimport Header from './components/header'\nimport Posts from './components/posts'\nimport Post from './components/post'\nimport About from './components/about'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.scss'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.posdId = null;\n  }\n\n  state = {\n    page: 'index',\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextState.page === this.state.page) return false;\n    return true;\n  }\n\n  componentDidUpdate() {\n    const { page } = this.state;\n    const url = this.postId ? `${page}/${this.postId}` : page;\n    window.history.pushState(null, null, url);\n  }\n\n  handleChangePage = (e, page, id = null) => {\n    e.preventDefault();\n    this.postId = id;\n    this.setState({\n      page,\n    })\n  }\n\n  switchPage = (page) => {\n    switch (page) {\n      case 'post':\n        return <Post id={this.postId} />;\n      case 'about':\n        return <About />;\n\n      case '': default:\n        return <Posts handleChangePage={this.handleChangePage} />\n    }\n  }\n\n  render() {\n    const { page } = this.state;\n    return (\n      <div className=\"wrapper\" >\n        <Header\n          handleChangePage={this.handleChangePage}\n        />\n        <main className=\"cotainer\">\n          {this.switchPage(page)}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}