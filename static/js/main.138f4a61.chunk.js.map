{"version":3,"sources":["components/nav/Nav.jsx","components/about/About.jsx","components/spinner/Spinner.jsx","components/post/Posts.jsx","components/home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Nav","className","to","About","Spinner","sizeUnit","size","color","loading","Post","post","handleBack","title","body","onClick","Posts","state","postList","postId","setState","getPost","axios","get","then","res","data","renderPostList","length","map","key","id","data-id","renderPost","prevProps","prevState","this","onChangePageId","Component","Home","App","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2TAceA,G,MAVH,kBACV,yBAAKC,UAAU,UACb,wBAAIA,UAAU,gBACZ,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,cCHKC,EAJD,kBACZ,+C,iBCYaC,G,MAXC,kBACd,yBAAKH,UAAU,WACb,kBAAC,IAAD,CACEI,SAAU,KACVC,KAAM,GACNC,MAAO,OACPC,SAAS,O,iBCLTC,G,MAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,WAAT,OACTD,EAAKE,OAASF,EAAKG,KAEjB,6BAASZ,UAAU,WACjB,wBAAIA,UAAU,uBAAuBS,EAAKE,OAC1C,2BAAIF,EAAKG,MACT,4BAAQC,QAASH,GAAjB,SALuB,kBAAC,EAAD,QAyFhBI,E,2MA9EbC,MAAQ,CACNC,SAAU,GACVC,OAAQ,KACRR,KAAM,I,EAkBRC,WAAa,WACX,EAAKQ,SAAS,CACZD,OAAQ,KACRR,KAAM,M,EAIVU,QAAU,WAAO,IACPF,EAAW,EAAKF,MAAhBE,OACRG,IAAMC,IAAN,qDAAwDJ,IACrDK,KAAK,SAAAC,GACJ,EAAKL,SAAS,CACZT,KAAMc,EAAIC,U,EAKlBC,eAAiB,SAACT,GAChB,OACE,yBAAKhB,UAAU,aAES,IAApBgB,EAASU,OAAe,kBAAC,EAAD,MACtBV,EAASW,IAAI,SAAAlB,GAAI,OACf,yBAAKT,UAAU,OAAO4B,IAAKnB,EAAKoB,GAAIC,UAASrB,EAAKoB,IAChD,wBACEhB,QAAS,WACP,EAAKK,SAAS,CAAED,OAAQR,EAAKoB,MAE/B7B,UAAU,eACTS,EAAKE,OAER,uBAAGX,UAAU,qBAAqBS,EAAKG,W,EASrDmB,WAAa,WAAO,IACVtB,EAAS,EAAKM,MAAdN,KACR,OACE,kBAAC,EAAD,CAAMA,KAAMA,EAAMC,WAAY,EAAKA,c,mFA1DlB,IAAD,OAClBU,IAAMC,IAAI,8CACPC,KAAK,SAAAC,GACJ,EAAKL,SAAS,CACZF,SAAUO,EAAIC,W,yCAKHQ,EAAWC,GACxBC,KAAKnB,MAAME,QAAUgB,EAAUhB,SAAWiB,KAAKnB,MAAME,QACvDiB,KAAKf,Y,+BAmDC,IAAD,EACsCe,KAAKnB,MAA1CE,EADD,EACCA,OAAQD,EADT,EACSA,SAAUmB,EADnB,EACmBA,eAC1B,OACE,qCACIlB,GAAUiB,KAAKT,eAAeT,EAAUmB,GACzClB,GAAUiB,KAAKH,kB,GA1EJK,aCVLC,EAJF,kBACX,oCCuBaC,G,uLAfX,OACE,kBAAC,IAAD,CAAQC,SAAUC,aAChB,yBAAKxC,UAAU,WACb,kBAAC,EAAD,MACA,0BAAMA,UAAU,YACd,kBAAC,IAAD,CAAOyC,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjC,kBAAC,IAAD,CAAOK,KAAK,SAASC,UAAWzC,IAChC,kBAAC,IAAD,CAAOwC,KAAK,SAASC,UAAW7B,W,GAT1BsB,cCGEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC,iB","file":"static/js/main.138f4a61.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport './Nav.scss'\n\nconst Nav = () => (\n  <nav className=\"navbar\" >\n    <ul className=\"navbar__list\">\n      <li><Link to=\"/\">Home</Link></li>\n      <li><Link to=\"/posts\">List</Link></li>\n      <li><Link to=\"/about\">About</Link></li>\n    </ul>\n  </nav>\n);\n\nexport default Nav;","import React from 'react';\n\nconst About = () => (\n  <p>About this blog</p>\n);\n\nexport default About;\n","import React from 'react';\nimport SyncLoader from 'react-spinners/SyncLoader';\nimport './Spinner.scss'\n\nconst Spinner = () => (\n  <div className='spinner'>\n    <SyncLoader\n      sizeUnit={\"px\"}\n      size={10}\n      color={'#999'}\n      loading={true}\n    />\n  </div>\n)\n\nexport default Spinner;","import React, { Component } from 'react';\nimport Spinner from './../spinner/Spinner'\nimport axios from 'axios';\nimport './Posts.scss'\n\nconst Post = ({ post, handleBack }) => (\n  !(post.title && post.body) ? <Spinner /> :\n    (\n      <section className=\"article\">\n        <h2 className=\"article__title show\">{post.title}</h2>\n        <p>{post.body}</p>\n        <button onClick={handleBack}>Back</button>\n      </section>\n    )\n);\n\nclass Posts extends Component {\n  state = {\n    postList: [],\n    postId: null,\n    post: {},\n  }\n\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/posts')\n      .then(res => {\n        this.setState({\n          postList: res.data,\n        })\n      })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.postId && prevState.postId !== this.state.postId) {\n      this.getPost();\n    }\n  }\n\n  handleBack = () => {\n    this.setState({\n      postId: null,\n      post: {}\n    })\n  }\n\n  getPost = () => {\n    const { postId } = this.state;\n    axios.get(`https://jsonplaceholder.typicode.com/posts/${postId}`)\n      .then(res => {\n        this.setState({\n          post: res.data,\n        })\n      })\n  }\n\n  renderPostList = (postList) => {\n    return (\n      <div className=\"post-list\">\n        {\n          postList.length === 0 ? <Spinner /> : (\n            postList.map(post => (\n              <div className=\"post\" key={post.id} data-id={post.id}>\n                <h4\n                  onClick={() => {\n                    this.setState({ postId: post.id })\n                  }}\n                  className=\"post__title\">\n                  {post.title}\n                </h4>\n                <p className=\"post__description\">{post.body}</p>\n              </div>\n            ))\n          )\n        }\n      </div>\n    )\n  }\n\n  renderPost = () => {\n    const { post } = this.state;\n    return (\n      <Post post={post} handleBack={this.handleBack} />\n    )\n  }\n\n  render() {\n    const { postId, postList, onChangePageId } = this.state;\n    return (\n      <>\n        {!postId && this.renderPostList(postList, onChangePageId)}\n        {postId && this.renderPost()}\n      </>\n    )\n  }\n}\nexport default Posts;\n","import React from 'react';\n\nconst Home = () => (\n  <p>Home</p>\n);\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Nav from './components/nav/Nav';\nimport About from './components/about/About';\nimport Posts from './components/post/Posts';\nimport Home from './components/home/Home';\n\nimport './index.scss'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"wrapper\" >\n          <Nav />\n          <main className=\"cotainer\">\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/posts\" component={Posts} />\n          </main>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}