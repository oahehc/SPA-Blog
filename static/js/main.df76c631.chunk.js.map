{"version":3,"sources":["img/img_01.jpg","components/logo/Logo.jsx","components/header/Header.jsx","components/nav/Nav.jsx","components/about/About.jsx","components/spinner/Spinner.jsx","components/post/Post.jsx","components/post-list/PostList.jsx","components/home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","className","to","Header","Nav","state","prevScrollpos","window","pageYOffset","isFixed","handleScroll","currentScrollPos","setState","addEventListener","this","removeEventListener","exact","activeClassName","Component","About","Spinner","sizeUnit","size","color","loading","Post","post","postId","props","match","params","id","axios","get","then","res","data","title","body","PostList","postList","history","length","map","key","data-id","onClick","push","withRouter","Home","src","pic_cover","alt","App","basename","process","path","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df76c631.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img_01.2b677c4e.jpg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Logo = () => (\n  <Link className=\"main-logo\" to=\"/\">\n    Beginner for\n    <span className=\"main-logo--color\">React Learning</span>\n  </Link>\n);\n\nexport default Logo;\n","import React from 'react';\nimport Logo from './../logo/Logo';\n\nconst Header = () => (\n  <header className=\"header\">\n    <Logo />\n    <p className=\"header__description\">此站是學習 React 的練習作品，文章是幫自己加強印象的學習筆記，Happy Coding !</p>\n  </header>\n);\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport Logo from './../logo/Logo';\n\nclass Nav extends Component {\n  state = {\n    prevScrollpos: window.pageYOffset,\n    isFixed: false,\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"scroll\", this.handleScroll);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"scroll\", this.handleScroll);\n  }\n\n  handleScroll = () => {\n    const { prevScrollpos } = this.state;\n    const currentScrollPos = window.pageYOffset;\n    const isFixed = prevScrollpos < currentScrollPos;\n\n    this.setState({\n      prevScrollpos: currentScrollPos,\n      isFixed\n    });\n  };\n\n  render() {\n    const { isFixed } = this.state;\n    return (\n      <nav\n        className={`navbar ${isFixed ? 'fixed' : ''}`} >\n        <ul className=\"navbar__list\">\n          <li><Logo /></li>\n          <li><NavLink exact to=\"/\" activeClassName=\"active\">Home</NavLink></li>\n          <li><NavLink to=\"/posts\" activeClassName=\"active\">List</NavLink></li>\n          <li><NavLink to=\"/about\" activeClassName=\"active\">About</NavLink></li>\n        </ul>\n      </nav>\n    )\n  }\n};\n\nexport default Nav;","import React from 'react';\n\nconst About = () => (\n  <p>About this blog</p>\n);\n\nexport default About;\n","import React from 'react';\nimport SyncLoader from 'react-spinners/SyncLoader';\nimport './Spinner.scss'\n\nconst Spinner = () => (\n  <div className='spinner'>\n    <SyncLoader\n      sizeUnit={\"px\"}\n      size={10}\n      color={'#25d0fec2'}\n      loading={true}\n    />\n  </div>\n)\n\nexport default Spinner;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Spinner from '../spinner/Spinner'\nimport axios from 'axios';\n\nclass Post extends Component {\n  state = {\n    post: {},\n  }\n\n  componentDidMount() {\n    const postId = this.props.match.params.id;\n    axios.get(`https://qootest.com/posts/${postId}`)\n      .then(res => {\n        this.setState({\n          post: res.data,\n        })\n      })\n  }\n\n  render() {\n    const { post } = this.state;\n    return (\n      !(post.title && post.body) ? <Spinner /> :\n        (\n          <section className=\"article\">\n            <h2 className=\"article__title show\">{post.title}</h2>\n            <div className=\"article__body\">\n              <p>{post.body}</p>\n            </div>\n            <Link className=\"btn active\" to=\"/posts\">Back</Link>\n          </section>\n        )\n    )\n  }\n};\n\nexport default Post;\n","import React, { Component } from 'react';\nimport Spinner from '../spinner/Spinner'\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\n\nclass PostList extends Component {\n  state = {\n    postList: [],\n  }\n\n  componentDidMount() {\n    axios.get('https://qootest.com/posts')\n      .then(res => {\n        this.setState({\n          postList: res.data,\n        })\n      })\n  }\n\n  render() {\n    const { postList } = this.state;\n    const { history } = this.props;\n    return (\n      <div className=\"post-list\">\n        {\n          postList.length === 0 ? <Spinner /> : (\n            postList.map(post => (\n              <div className=\"post\" key={post.id} data-id={post.id}\n                onClick={() => {\n                  history.push('/posts/' + post.id)\n                }}>\n                <h4 className=\"post__title\">\n                  {post.title}\n                </h4>\n                <p className=\"post__description\">{post.body}</p>\n              </div>\n            ))\n          )\n        }\n      </div>\n    )\n  }\n}\nexport default withRouter(PostList);\n","import React from 'react';\nimport pic_cover from './../../img/img_01.jpg';\n\nconst Home = () => (\n  <div className=\"home-list\">\n    <section className=\"list-item cover\">\n      <div className=\"pic\">\n        <img src={pic_cover} alt=\"\" />\n      </div>\n      <div className=\"list-item__inner\">\n        <div className=\"list-item__title\">\n          <span>2019/09/03</span>\n          <h3>React 學習筆記第一篇 </h3>\n        </div>\n        <div className=\"list-item__description\">\n          <p>\n            一本給初學者的 React 中文入門教學書，由淺入深學習 ReactJS 生態系 (Flux, Redux, React Router, ImmutableJS, React Native, Relay/GraphQL etc.)，打造跨平台應用程式。\n            </p>\n        </div>\n      </div>\n    </section>\n  </div>\n);\n\nexport default Home;\n","import './scss/index.scss';\n\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Header from './components/header/Header'\nimport Nav from './components/nav/Nav';\nimport About from './components/about/About';\nimport Post from './components/post/Post';\nimport PostList from './components/post-list/PostList';\nimport Home from './components/home/Home';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"wrapper\" >\n          <Nav />\n          <Header />\n          <main className=\"container\">\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/about\" component={About} />\n            <Route exact path=\"/posts\" component={PostList} />\n            <Route path=\"/posts/:id\" component={Post} />\n          </main>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}