{"ast":null,"code":"import React from 'react';\nimport { Provider } from 'react-redux';\nimport { initializeStore } from \"./store\";\nimport App from 'next/app';\nexport const withRedux = (PageComponent, {\n  ssr = true\n} = {}) => {\n  const WithRedux = ({\n    initialReduxState,\n    ...props\n  }) => {\n    const store = getOrInitializeStore(initialReduxState);\n    return React.createElement(Provider, {\n      store: store\n    }, React.createElement(PageComponent, props));\n  }; // Set the correct displayName in development\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n    WithRedux.displayName = \"withRedux(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithRedux.getInitialProps = async context => {\n      // Get or Create the store with `undefined` as initialState\n      // This allows you to set a custom default initialState\n      const reduxStore = getOrInitializeStore(); // Provide the store to getInitialProps of pages\n\n      context.reduxStore = reduxStore; // Run getInitialProps from HOCed PageComponent\n\n      const pageProps = typeof PageComponent.getInitialProps === 'function' ? await PageComponent.getInitialProps(context) : {}; // Pass props to PageComponent\n\n      return { ...pageProps,\n        initialReduxState: reduxStore.getState()\n      };\n    };\n  }\n\n  return WithRedux;\n};\nlet reduxStore;\n\nconst getOrInitializeStore = initialState => {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (true) {\n    return initializeStore(initialState);\n  } // Create store if unavailable on the client and set it on the window object\n\n\n  if (!reduxStore) {\n    reduxStore = initializeStore(initialState);\n  }\n\n  return reduxStore;\n};","map":{"version":3,"sources":["/Users/yakim/Desktop/blog-spa/src/withRedux.js"],"names":["React","Provider","initializeStore","App","withRedux","PageComponent","ssr","WithRedux","initialReduxState","props","store","getOrInitializeStore","process","env","NODE_ENV","displayName","name","getInitialProps","context","reduxStore","pageProps","getState","initialState"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,eAAT;AACA,OAAOC,GAAP,MAAgB,UAAhB;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,aAAD,EAAgB;AAAEC,EAAAA,GAAG,GAAG;AAAR,IAAiB,EAAjC,KAAwC;AAChE,QAAMC,SAAS,GAAG,CAAC;AAAEC,IAAAA,iBAAF;AAAqB,OAAGC;AAAxB,GAAD,KAAqC;AACtD,UAAMC,KAAK,GAAGC,oBAAoB,CAACH,iBAAD,CAAlC;AACA,WACC,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEE;AAAjB,OACC,oBAAC,aAAD,EAAmBD,KAAnB,CADD,CADD;AAKA,GAPD,CADgE,CAWhE;;;AACA,MAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAC1C,UAAMC,WAAW,GAChBV,aAAa,CAACU,WAAd,IAA6BV,aAAa,CAACW,IAA3C,IAAmD,WADpD;AAGAT,IAAAA,SAAS,CAACQ,WAAV,uBAAqCA,WAArC;AACA;;AAED,MAAIT,GAAG,IAAID,aAAa,CAACY,eAAzB,EAA0C;AACzCV,IAAAA,SAAS,CAACU,eAAV,GAA4B,MAAMC,OAAN,IAAiB;AAC5C;AACA;AACA,YAAMC,UAAU,GAAGR,oBAAoB,EAAvC,CAH4C,CAK5C;;AACAO,MAAAA,OAAO,CAACC,UAAR,GAAqBA,UAArB,CAN4C,CAQ5C;;AACA,YAAMC,SAAS,GACd,OAAOf,aAAa,CAACY,eAArB,KAAyC,UAAzC,GACG,MAAMZ,aAAa,CAACY,eAAd,CAA8BC,OAA9B,CADT,GAEG,EAHJ,CAT4C,CAc5C;;AACA,aAAO,EACN,GAAGE,SADG;AAENZ,QAAAA,iBAAiB,EAAEW,UAAU,CAACE,QAAX;AAFb,OAAP;AAIA,KAnBD;AAoBA;;AAED,SAAOd,SAAP;AACA,CA3CM;AA6CP,IAAIY,UAAJ;;AACA,MAAMR,oBAAoB,GAAGW,YAAY,IAAI;AAC5C;AACA,YAAmC;AAClC,WAAOpB,eAAe,CAACoB,YAAD,CAAtB;AACA,GAJ2C,CAM5C;;;AACA,MAAI,CAACH,UAAL,EAAiB;AAChBA,IAAAA,UAAU,GAAGjB,eAAe,CAACoB,YAAD,CAA5B;AACA;;AAED,SAAOH,UAAP;AACA,CAZD","sourcesContent":["import React from 'react'\nimport { Provider } from 'react-redux'\nimport { initializeStore } from './store'\nimport App from 'next/app'\n\nexport const withRedux = (PageComponent, { ssr = true } = {}) => {\n const WithRedux = ({ initialReduxState, ...props }) => {\n  const store = getOrInitializeStore(initialReduxState)\n  return (\n   <Provider store={store}>\n    <PageComponent {...props} />\n   </Provider>\n  )\n }\n\n\n // Set the correct displayName in development\n if (process.env.NODE_ENV !== 'production') {\n  const displayName =\n   PageComponent.displayName || PageComponent.name || 'Component'\n\n  WithRedux.displayName = `withRedux(${displayName})`\n }\n\n if (ssr || PageComponent.getInitialProps) {\n  WithRedux.getInitialProps = async context => {\n   // Get or Create the store with `undefined` as initialState\n   // This allows you to set a custom default initialState\n   const reduxStore = getOrInitializeStore()\n\n   // Provide the store to getInitialProps of pages\n   context.reduxStore = reduxStore\n\n   // Run getInitialProps from HOCed PageComponent\n   const pageProps =\n    typeof PageComponent.getInitialProps === 'function'\n     ? await PageComponent.getInitialProps(context)\n     : {}\n\n   // Pass props to PageComponent\n   return {\n    ...pageProps,\n    initialReduxState: reduxStore.getState(),\n   }\n  }\n }\n\n return WithRedux\n}\n\nlet reduxStore\nconst getOrInitializeStore = initialState => {\n // Always make a new store if server, otherwise state is shared between requests\n if (typeof window === 'undefined') {\n  return initializeStore(initialState)\n }\n\n // Create store if unavailable on the client and set it on the window object\n if (!reduxStore) {\n  reduxStore = initializeStore(initialState)\n }\n\n return reduxStore\n}"]},"metadata":{},"sourceType":"module"}